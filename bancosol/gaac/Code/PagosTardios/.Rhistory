ifelse(cm1 == 'D' & cmt == 'D' , 'DD',
ifelse(cm1 == 'D' & cmt == 'E' , 'DE',
ifelse(cm1 == 'D' & cmt == 'F' , 'DF',
ifelse(cm1 == 'D' & cmt == 'S' , 'DS',
ifelse(cm1 == 'E' & cmt == 'A' , 'EA',
ifelse(cm1 == 'E' & cmt == 'B' , 'EB',
ifelse(cm1 == 'E' & cmt == 'C' , 'EC',
ifelse(cm1 == 'E' & cmt == 'D' , 'ED',
ifelse(cm1 == 'E' & cmt == 'E' , 'EE',
ifelse(cm1 == 'E' & cmt == 'F' , 'EF',
ifelse(cm1 == 'E' & cmt == 'S' , 'ES',
ifelse(cm1 == 'F' & cmt == 'A' , 'FA',
ifelse(cm1 == 'F' & cmt == 'B' , 'FB',
ifelse(cm1 == 'F' & cmt == 'C' , 'FC',
ifelse(cm1 == 'F' & cmt == 'D' , 'FD',
ifelse(cm1 == 'F' & cmt == 'E' , 'FE',
ifelse(cm1 == 'F' & cmt == 'F' , 'FF',
ifelse(cm1 == 'F' & cmt == 'S' , 'FS',
ifelse(cm1 == 'S' & cmt == 'S' , 'SS',
NA)))))))))))))))))))))))))))))))))))))))))))) %>%
mutate(trans2 = ifelse(cm1 %in% c('A','B','C','D','E','F','S') &
cmt %in% c('A','B','C','D','E','F','S') ,
paste0(cm1,cmt),NA))
unique(bdcTrans$trans)
unique(bdcTrans2$trans)
unique(bdcTrans2$trans2)
length(which(is.na(bdcTrans2$trans2)))
length(which(is.na(bdcTrans2$trans)))
bdcTrans2 <- bdcTrans %>%
mutate(trans = ifelse(cm1 == 'A' & cmt == 'A' , 'AA',
ifelse(cm1 == 'A' & cmt == 'B' , 'AB',
ifelse(cm1 == 'A' & cmt == 'C' , 'AC',
ifelse(cm1 == 'A' & cmt == 'D' , 'AD',
ifelse(cm1 == 'A' & cmt == 'E' , 'AE',
ifelse(cm1 == 'A' & cmt == 'F' , 'AF',
ifelse(cm1 == 'A' & cmt == 'S' , 'AS',
ifelse(cm1 == 'B' & cmt == 'A' , 'BA',
ifelse(cm1 == 'B' & cmt == 'B' , 'BB',
ifelse(cm1 == 'B' & cmt == 'C' , 'BC',
ifelse(cm1 == 'B' & cmt == 'D' , 'BD',
ifelse(cm1 == 'B' & cmt == 'E' , 'BE',
ifelse(cm1 == 'B' & cmt == 'F' , 'BF',
ifelse(cm1 == 'B' & cmt == 'S' , 'BS',
ifelse(cm1 == 'C' & cmt == 'A' , 'CA',
ifelse(cm1 == 'C' & cmt == 'B' , 'CB',
ifelse(cm1 == 'C' & cmt == 'C' , 'CC',
ifelse(cm1 == 'C' & cmt == 'D' , 'CD',
ifelse(cm1 == 'C' & cmt == 'E' , 'CE',
ifelse(cm1 == 'C' & cmt == 'F' , 'CF',
ifelse(cm1 == 'C' & cmt == 'S' , 'CS',
ifelse(cm1 == 'D' & cmt == 'A' , 'DA',
ifelse(cm1 == 'D' & cmt == 'B' , 'DB',
ifelse(cm1 == 'D' & cmt == 'C' , 'DC',
ifelse(cm1 == 'D' & cmt == 'D' , 'DD',
ifelse(cm1 == 'D' & cmt == 'E' , 'DE',
ifelse(cm1 == 'D' & cmt == 'F' , 'DF',
ifelse(cm1 == 'D' & cmt == 'S' , 'DS',
ifelse(cm1 == 'E' & cmt == 'A' , 'EA',
ifelse(cm1 == 'E' & cmt == 'B' , 'EB',
ifelse(cm1 == 'E' & cmt == 'C' , 'EC',
ifelse(cm1 == 'E' & cmt == 'D' , 'ED',
ifelse(cm1 == 'E' & cmt == 'E' , 'EE',
ifelse(cm1 == 'E' & cmt == 'F' , 'EF',
ifelse(cm1 == 'E' & cmt == 'S' , 'ES',
ifelse(cm1 == 'F' & cmt == 'A' , 'FA',
ifelse(cm1 == 'F' & cmt == 'B' , 'FB',
ifelse(cm1 == 'F' & cmt == 'C' , 'FC',
ifelse(cm1 == 'F' & cmt == 'D' , 'FD',
ifelse(cm1 == 'F' & cmt == 'E' , 'FE',
ifelse(cm1 == 'F' & cmt == 'F' , 'FF',
ifelse(cm1 == 'F' & cmt == 'S' , 'FS',
ifelse(cm1 == 'S' & cmt == 'S' , 'SS',
NA)))))))))))))))))))))))))))))))))))))))))))) %>%
mutate(trans2 = case_when(cm1 %in% c('A','B','C','D','E','F') &
cmt %in% c('A','B','C','D','E','F','S') ~paste0(cm1,cmt),
cm1 == 'S' & cmt =='S'~paste0(cm1,cmt),
TRUE~NA))
?case_when
bdcTrans2 <- bdcTrans %>%
mutate(trans = ifelse(cm1 == 'A' & cmt == 'A' , 'AA',
ifelse(cm1 == 'A' & cmt == 'B' , 'AB',
ifelse(cm1 == 'A' & cmt == 'C' , 'AC',
ifelse(cm1 == 'A' & cmt == 'D' , 'AD',
ifelse(cm1 == 'A' & cmt == 'E' , 'AE',
ifelse(cm1 == 'A' & cmt == 'F' , 'AF',
ifelse(cm1 == 'A' & cmt == 'S' , 'AS',
ifelse(cm1 == 'B' & cmt == 'A' , 'BA',
ifelse(cm1 == 'B' & cmt == 'B' , 'BB',
ifelse(cm1 == 'B' & cmt == 'C' , 'BC',
ifelse(cm1 == 'B' & cmt == 'D' , 'BD',
ifelse(cm1 == 'B' & cmt == 'E' , 'BE',
ifelse(cm1 == 'B' & cmt == 'F' , 'BF',
ifelse(cm1 == 'B' & cmt == 'S' , 'BS',
ifelse(cm1 == 'C' & cmt == 'A' , 'CA',
ifelse(cm1 == 'C' & cmt == 'B' , 'CB',
ifelse(cm1 == 'C' & cmt == 'C' , 'CC',
ifelse(cm1 == 'C' & cmt == 'D' , 'CD',
ifelse(cm1 == 'C' & cmt == 'E' , 'CE',
ifelse(cm1 == 'C' & cmt == 'F' , 'CF',
ifelse(cm1 == 'C' & cmt == 'S' , 'CS',
ifelse(cm1 == 'D' & cmt == 'A' , 'DA',
ifelse(cm1 == 'D' & cmt == 'B' , 'DB',
ifelse(cm1 == 'D' & cmt == 'C' , 'DC',
ifelse(cm1 == 'D' & cmt == 'D' , 'DD',
ifelse(cm1 == 'D' & cmt == 'E' , 'DE',
ifelse(cm1 == 'D' & cmt == 'F' , 'DF',
ifelse(cm1 == 'D' & cmt == 'S' , 'DS',
ifelse(cm1 == 'E' & cmt == 'A' , 'EA',
ifelse(cm1 == 'E' & cmt == 'B' , 'EB',
ifelse(cm1 == 'E' & cmt == 'C' , 'EC',
ifelse(cm1 == 'E' & cmt == 'D' , 'ED',
ifelse(cm1 == 'E' & cmt == 'E' , 'EE',
ifelse(cm1 == 'E' & cmt == 'F' , 'EF',
ifelse(cm1 == 'E' & cmt == 'S' , 'ES',
ifelse(cm1 == 'F' & cmt == 'A' , 'FA',
ifelse(cm1 == 'F' & cmt == 'B' , 'FB',
ifelse(cm1 == 'F' & cmt == 'C' , 'FC',
ifelse(cm1 == 'F' & cmt == 'D' , 'FD',
ifelse(cm1 == 'F' & cmt == 'E' , 'FE',
ifelse(cm1 == 'F' & cmt == 'F' , 'FF',
ifelse(cm1 == 'F' & cmt == 'S' , 'FS',
ifelse(cm1 == 'S' & cmt == 'S' , 'SS',
NA)))))))))))))))))))))))))))))))))))))))))))) %>%
mutate(trans2 = ifelse(cm1 %in% c('A','B','C','D','E','F') &
cmt %in% c('A','B','C','D','E','F','S'),paste0(cm1,cmt),NA)) %>%
mutate(trans2 = ifelse(cm1=='S'&cmt=='S',paste0(cm1,cmt),NA))
bdcTrans2 <- bdcTrans %>%
mutate(trans = ifelse(cm1 == 'A' & cmt == 'A' , 'AA',
ifelse(cm1 == 'A' & cmt == 'B' , 'AB',
ifelse(cm1 == 'A' & cmt == 'C' , 'AC',
ifelse(cm1 == 'A' & cmt == 'D' , 'AD',
ifelse(cm1 == 'A' & cmt == 'E' , 'AE',
ifelse(cm1 == 'A' & cmt == 'F' , 'AF',
ifelse(cm1 == 'A' & cmt == 'S' , 'AS',
ifelse(cm1 == 'B' & cmt == 'A' , 'BA',
ifelse(cm1 == 'B' & cmt == 'B' , 'BB',
ifelse(cm1 == 'B' & cmt == 'C' , 'BC',
ifelse(cm1 == 'B' & cmt == 'D' , 'BD',
ifelse(cm1 == 'B' & cmt == 'E' , 'BE',
ifelse(cm1 == 'B' & cmt == 'F' , 'BF',
ifelse(cm1 == 'B' & cmt == 'S' , 'BS',
ifelse(cm1 == 'C' & cmt == 'A' , 'CA',
ifelse(cm1 == 'C' & cmt == 'B' , 'CB',
ifelse(cm1 == 'C' & cmt == 'C' , 'CC',
ifelse(cm1 == 'C' & cmt == 'D' , 'CD',
ifelse(cm1 == 'C' & cmt == 'E' , 'CE',
ifelse(cm1 == 'C' & cmt == 'F' , 'CF',
ifelse(cm1 == 'C' & cmt == 'S' , 'CS',
ifelse(cm1 == 'D' & cmt == 'A' , 'DA',
ifelse(cm1 == 'D' & cmt == 'B' , 'DB',
ifelse(cm1 == 'D' & cmt == 'C' , 'DC',
ifelse(cm1 == 'D' & cmt == 'D' , 'DD',
ifelse(cm1 == 'D' & cmt == 'E' , 'DE',
ifelse(cm1 == 'D' & cmt == 'F' , 'DF',
ifelse(cm1 == 'D' & cmt == 'S' , 'DS',
ifelse(cm1 == 'E' & cmt == 'A' , 'EA',
ifelse(cm1 == 'E' & cmt == 'B' , 'EB',
ifelse(cm1 == 'E' & cmt == 'C' , 'EC',
ifelse(cm1 == 'E' & cmt == 'D' , 'ED',
ifelse(cm1 == 'E' & cmt == 'E' , 'EE',
ifelse(cm1 == 'E' & cmt == 'F' , 'EF',
ifelse(cm1 == 'E' & cmt == 'S' , 'ES',
ifelse(cm1 == 'F' & cmt == 'A' , 'FA',
ifelse(cm1 == 'F' & cmt == 'B' , 'FB',
ifelse(cm1 == 'F' & cmt == 'C' , 'FC',
ifelse(cm1 == 'F' & cmt == 'D' , 'FD',
ifelse(cm1 == 'F' & cmt == 'E' , 'FE',
ifelse(cm1 == 'F' & cmt == 'F' , 'FF',
ifelse(cm1 == 'F' & cmt == 'S' , 'FS',
ifelse(cm1 == 'S' & cmt == 'S' , 'SS',
NA)))))))))))))))))))))))))))))))))))))))))))) %>%
mutate(trans2 = ifelse(cm1 %in% c('A','B','C','D','E','F') &
cmt %in% c('A','B','C','D','E','F','S'),paste0(cm1,cmt),NA)) %>%
mutate(trans2 = ifelse(cm1=='S'&cmt=='S',paste0(cm1,cmt),trans2))
unique(bdcTrans2$trans)
unique(bdcTrans2$trans2)
length(which(is.na(bdcTrans2$trans)))
length(which(is.na(bdcTrans2$trans2)))
na.omit
which(na.omit(bdcTrans2$trans)!=na.omit(bdcTrans2$trans2))
length(which(na.omit(bdcTrans2$trans)!=na.omit(bdcTrans2$trans2)))
length(which(na.omit(bdcTrans2$trans)==na.omit(bdcTrans2$trans2)))
length(which(na.omit(bdcTrans2$trans)==na.omit(bdcTrans2$trans2)))+1422465
head(bdcTrans$monDate)
'A'<'B'
'B'<'c'
'B'<'a'
'B'<'A'
bdcTrans2 <- bdcTrans %>%
mutate(trans2 = ifelse(cm1 %in% c('A','B','C','D','E','F') &
cmt %in% c('A','B','C','D','E','F','S'),paste0(cm1,cmt),NA)) %>%
mutate(trans2 = ifelse(cm1=='S'&cmt=='S',paste0(cm1,cmt),trans2)) %>%
bdcTrans <- bdcTrans2 %>%
dplyr::filter(!is.na(cm1)) %>%
ungroup() %>%
group_by(cm1, monDate) %>%
mutate(rowTot = n()) %>%
ungroup() %>%
group_by(OPERACION) %>%
arrange(OPERACION, monDate) %>%
mutate(det = ifelse(cm1 < cmt,1,0)) %>%
glimpse()
bdcTrans2 <- bdcTrans %>%
mutate(trans = ifelse(cm1 %in% c('A','B','C','D','E','F') &
cmt %in% c('A','B','C','D','E','F','S'),paste0(cm1,cmt),NA)) %>%
mutate(trans = ifelse(cm1=='S'&cmt=='S',paste0(cm1,cmt),trans2))
bdcTrans2 <- bdcTrans %>%
mutate(trans = ifelse(cm1 %in% c('A','B','C','D','E','F') &
cmt %in% c('A','B','C','D','E','F','S'),paste0(cm1,cmt),NA)) %>%
mutate(trans = ifelse(cm1=='S'&cmt=='S',paste0(cm1,cmt),trans))
bdcTrans <- bdcTrans2 %>%
dplyr::filter(!is.na(cm1)) %>%
ungroup() %>%
group_by(cm1, monDate) %>%
mutate(rowTot = n()) %>%
ungroup() %>%
group_by(OPERACION) %>%
arrange(OPERACION, monDate) %>%
mutate(det = ifelse(cm1 < cmt,1,0)) %>%
glimpse()
bdcFull <- bdcTrans2 %>%
dplyr::filter(!is.na(cm1)) %>%
ungroup() %>%
group_by(cm1, monDate) %>%
mutate(rowTot = n()) %>%
ungroup() %>%
mutate(det = ifelse(cm1 < cmt,1,0)) %>%
glimpse()
head(bdc$Full==bdcTrans)
head(bdcFull==bdcTrans)
length(which(bdcFull!=bdcTrans))
table(bdcTrans[bdcTrans$monDate == 'sep. 2022',]$trans)
remove(bdcTrans2)
#_______________________________________________________________________________
bdcFull <- readRDS('D:/!bso/transMat/bdcFull.rds')
#_______________________________________________________________________________
####____Counting loans____####
bdcTrans <- bdcFull %>%
select(OPERACION, CALIFICACION, monDate, saldous, previus, saldoCast) %>%
#mutate(monDate = zoo::as.yearmon(monDate)) %>%
#select(-dayDate) %>%
#dplyr::filter(monDate >= 'Jan 2017') %>%
mutate(saldous = ifelse(CALIFICACION == 'S', saldoCast, saldous)) %>%
select(-saldoCast) %>%
group_by(OPERACION) %>%
arrange(OPERACION, monDate) %>%
dplyr::rename(cmt = CALIFICACION) %>%
mutate(cm1 = dplyr::lag(cmt, 1)) %>%
mutate(difPrev = previus - dplyr::lag(previus)) %>%
ungroup()
system.time(
bdcTrans2 <- bdcTrans %>%
mutate(trans = ifelse(cm1 == 'A' & cmt == 'A' , 'AA',
ifelse(cm1 == 'A' & cmt == 'B' , 'AB',
ifelse(cm1 == 'A' & cmt == 'C' , 'AC',
ifelse(cm1 == 'A' & cmt == 'D' , 'AD',
ifelse(cm1 == 'A' & cmt == 'E' , 'AE',
ifelse(cm1 == 'A' & cmt == 'F' , 'AF',
ifelse(cm1 == 'A' & cmt == 'S' , 'AS',
ifelse(cm1 == 'B' & cmt == 'A' , 'BA',
ifelse(cm1 == 'B' & cmt == 'B' , 'BB',
ifelse(cm1 == 'B' & cmt == 'C' , 'BC',
ifelse(cm1 == 'B' & cmt == 'D' , 'BD',
ifelse(cm1 == 'B' & cmt == 'E' , 'BE',
ifelse(cm1 == 'B' & cmt == 'F' , 'BF',
ifelse(cm1 == 'B' & cmt == 'S' , 'BS',
ifelse(cm1 == 'C' & cmt == 'A' , 'CA',
ifelse(cm1 == 'C' & cmt == 'B' , 'CB',
ifelse(cm1 == 'C' & cmt == 'C' , 'CC',
ifelse(cm1 == 'C' & cmt == 'D' , 'CD',
ifelse(cm1 == 'C' & cmt == 'E' , 'CE',
ifelse(cm1 == 'C' & cmt == 'F' , 'CF',
ifelse(cm1 == 'C' & cmt == 'S' , 'CS',
ifelse(cm1 == 'D' & cmt == 'A' , 'DA',
ifelse(cm1 == 'D' & cmt == 'B' , 'DB',
ifelse(cm1 == 'D' & cmt == 'C' , 'DC',
ifelse(cm1 == 'D' & cmt == 'D' , 'DD',
ifelse(cm1 == 'D' & cmt == 'E' , 'DE',
ifelse(cm1 == 'D' & cmt == 'F' , 'DF',
ifelse(cm1 == 'D' & cmt == 'S' , 'DS',
ifelse(cm1 == 'E' & cmt == 'A' , 'EA',
ifelse(cm1 == 'E' & cmt == 'B' , 'EB',
ifelse(cm1 == 'E' & cmt == 'C' , 'EC',
ifelse(cm1 == 'E' & cmt == 'D' , 'ED',
ifelse(cm1 == 'E' & cmt == 'E' , 'EE',
ifelse(cm1 == 'E' & cmt == 'F' , 'EF',
ifelse(cm1 == 'E' & cmt == 'S' , 'ES',
ifelse(cm1 == 'F' & cmt == 'A' , 'FA',
ifelse(cm1 == 'F' & cmt == 'B' , 'FB',
ifelse(cm1 == 'F' & cmt == 'C' , 'FC',
ifelse(cm1 == 'F' & cmt == 'D' , 'FD',
ifelse(cm1 == 'F' & cmt == 'E' , 'FE',
ifelse(cm1 == 'F' & cmt == 'F' , 'FF',
ifelse(cm1 == 'F' & cmt == 'S' , 'FS',
ifelse(cm1 == 'S' & cmt == 'S' , 'SS',
NA))))))))))))))))))))))))))))))))))))))))))))
)
System.time(
bdcTrans <- bdcTrans %>%
mutate(trans2 = ifelse(cm1 %in% c('A','B','C','D','E','F') &
cmt %in% c('A','B','C','D','E','F','S'),paste0(cm1,cmt),NA)) %>%
mutate(trans2 = ifelse(cm1=='S'&cmt=='S',paste0(cm1,cmt),trans2))
)
system.time(
bdcTrans <- bdcTrans %>%
mutate(trans2 = ifelse(cm1 %in% c('A','B','C','D','E','F') &
cmt %in% c('A','B','C','D','E','F','S'),paste0(cm1,cmt),NA)) %>%
mutate(trans2 = ifelse(cm1=='S'&cmt=='S',paste0(cm1,cmt),trans2))
)
remove(list = ls())
gc()
options("encoding" = "UTF-8")
library(dplyr)
library(lubridate)
library(data.table)
library(tidyverse)
library(readxl)
library(writexl)
library(xts)
library(quantmod)
library(stringr)    # Working with strings
library(forcats)
library(tseries)
library(openxlsx)
remove(list = ls())
gc()
options("encoding" = "UTF-8")
library(dplyr)
library(lubridate)
library(data.table)
library(tidyverse)
library(readxl)
library(writexl)
library(xts)
library(expm)
library(quantmod)
library(stringr)    # Working with strings
library(forcats)    # Working with factors/categorical data
library(janitor)
####____READING BDCFULL____####
bdcFull <- readRDS('D:/!bso/transMat/bdcFull.rds')
####____CAPTURE EXAMPLES____####
bdcTrans <- bdcFull %>%
select(OPERACION, CTACLIENTE, CALIFICACION, monDate, DIASMORA) %>%
mutate(monDate = zoo::as.yearmon(monDate)) %>%
#select(-dayDate) %>%
dplyr::filter(monDate >= 'mar. 2015') %>%
group_by(OPERACION,CTACLIENTE) %>%
arrange(OPERACION, CTACLIENTE, monDate) %>%
mutate(DiasMoraMes= DIASMORA - dplyr::lag(DIASMORA,1))
pos <- which(bdcTrans$DiasMoraMes>31)
bdcExample <- bdcTrans[sort(c(pos-1,pos)),]
View(bdcExample)
bdcFull %>%
dplyr::filter(OPERACION==175027)
ex <- bdcFull %>%
dplyr::filter(OPERACION==175027)
View(ex)
ex <- bdcFull %>%
dplyr::filter(OPERACION==851106)
View(ex)
ex <- bdcFull %>%
dplyr::filter(OPERACION==885665)
View(ex)
ex <- bdcFull %>%
dplyr::filter(OPERACION==885655)
View(ex)
remove(bdcExample)
remove(ex)
remove(bdcFull)
####____OBTENIENDO LAS OPERACIONES EJEMPLO____####
join <- read_xlsx("D:/!bso/mph/BaseCarteraOct2022_join.xlsx",sheet = 'Sheet1')
jj <- join %>%
dplyr::filter(Instancias_UR>=4) %>%
select(Operacion)
####____PARA OBTENER UNA MUESTRA____####
set.seed(14112022)
Ops_ejemplo <- sample(jj$Operacion,size = 50)
####____PARA OBTENER TODAS LAS OPERACIONES____####
#Ops_ejemplo <- jj$Operacion
####____OBTENIENDO SUS PAGOS____####
Pagos <- fread('D:/!bso/bases/csv/PagosCarteraDesdeEne2022_Oct2022.csv')
P2full <- Pagos %>%
mutate(mesPago = month(FechaPago)) %>%
mutate(dayPago = day(FechaPago)) %>%
mutate(yearPago = year(FechaPago)) %>%
mutate(Hora_UltDia = max(HoraPago[which(dayPago==max(dayPago))])) %>%
dplyr::filter(yearPago == 2022) %>%
group_by(Operacion, mesPago, yearPago) %>%
summarise(HoraPago = max(HoraPago), Hora_UltDia = max(Hora_UltDia),
FechaPrevistaPago = max(FechaPrevistaPago),dayPago = max(dayPago),
CapitalPagado=sum(CapitalPagado)) %>%
ungroup() %>%
mutate(FechaPago=as.Date(paste0(yearPago,"-",mesPago,"-",dayPago)))
write.csv(P2full,"D:/!bso/mph/ProcessPagosOct22.csv",row.names = F)
remove(bdcTrans)
lastday <- data.frame(dia=seq.Date(as.Date("2022-01-01"),as.Date("2022-12-31"),by="1 day")) %>%
mutate(mesano=as.yearmon(dia)) %>%
group_by(mesano) %>%
summarise(maxdia=max(dia)) %>%
ungroup()
ListaPagos <- NULL
for (i in 1:length(Ops_ejemplo)) {
Pagos_Op <-P2full %>%
dplyr::filter(Operacion==Ops_ejemplo[i]) %>%
mutate(mesano=as.yearmon(FechaPago)) %>%
left_join(lastday, by='mesano') %>%
dplyr::filter(FechaPago==maxdia & as.numeric(substr(HoraPago,1,2))>12) %>%
select(Operacion,FechaPago,HoraPago,FechaPrevistaPago)
ListaPagos <- ListaPagos %>%
bind_rows(Pagos_Op)
}
fverifprev <- unique(c(as.Date(ListaPagos$FechaPago)-1))
fveriflast <- unique(c(as.Date(ListaPagos$FechaPago)))
ListaPagos <- ListaPagos %>%
mutate(FechaPago = as.Date(ListaPagos$FechaPago))
ejemplos <- data.frame(Operacion=as.numeric(),
Fecha=as.Date(character()),
DIASMORA=as.numeric(),
FechaPago=as.Date(as.numeric()),
HoraPago=character(),
FechaPrevistaPago=as.Date(as.numeric()))
for (i in 1:length(fverifprev)){
fecha_verif <- str_replace(str_replace(as.character(fverifprev[i]),"-",""),"-","")
tryCatch({
ListaDia <- ListaPagos %>%
dplyr::filter(FechaPago==fverifprev[i]+1)
baseDia <- fread(paste0('D:/!bso/girCartera/BaseCartera_',fecha_verif,'.txt'),
encoding = 'Latin-1', fill = T) %>%
dplyr::filter(OPERACION %in% ListaDia$Operacion) %>%
select(OPERACION,DIASMORA) %>%
rename(Operacion=OPERACION) %>%
left_join(ListaDia,by="Operacion") %>%
mutate(Fecha=fverifprev[i]) %>%
relocate(Operacion,Fecha,DIASMORA,FechaPago,HoraPago)
ejemplos <- ejemplos %>% bind_rows(baseDia)
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
for (i in 1:length(fveriflast)){
fecha_verif <- str_replace(str_replace(as.character(fveriflast[i]),"-",""),"-","")
tryCatch({
ListaDia <- ListaPagos %>%
dplyr::filter(FechaPago==fveriflast[i])
baseDia <- fread(paste0('D:/!bso/girCartera/BaseCartera_',fecha_verif,'.txt'),
encoding = 'Latin-1', fill = T) %>%
dplyr::filter(OPERACION %in% ListaDia$Operacion) %>%
select(OPERACION,DIASMORA) %>%
rename(Operacion=OPERACION) %>%
left_join(ListaDia,by="Operacion") %>%
mutate(Fecha=fveriflast[i]) %>%
relocate(Operacion,Fecha,DIASMORA,FechaPago,HoraPago)
ejemplos <- ejemplos %>% bind_rows(baseDia)
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
ejemplos <- ejemplos %>%
arrange(Operacion,Fecha)
View(ejemplos)
####____PARA OBTENER UNA MUESTRA____####
# set.seed(14112022)
# Ops_ejemplo <- sample(jj$Operacion,size = 1)
####____PARA OBTENER TODAS LAS OPERACIONES____####
Ops_ejemplo <- jj$Operacion
lastday <- data.frame(dia=seq.Date(as.Date("2022-01-01"),as.Date("2022-12-31"),by="1 day")) %>%
mutate(mesano=as.yearmon(dia)) %>%
group_by(mesano) %>%
summarise(maxdia=max(dia)) %>%
ungroup()
ListaPagos <- NULL
for (i in 1:length(Ops_ejemplo)) {
Pagos_Op <-P2full %>%
dplyr::filter(Operacion==Ops_ejemplo[i]) %>%
mutate(mesano=as.yearmon(FechaPago)) %>%
left_join(lastday, by='mesano') %>%
dplyr::filter(FechaPago==maxdia & as.numeric(substr(HoraPago,1,2))>12) %>%
select(Operacion,FechaPago,HoraPago,FechaPrevistaPago)
ListaPagos <- ListaPagos %>%
bind_rows(Pagos_Op)
}
fverifprev <- unique(c(as.Date(ListaPagos$FechaPago)-1))
fveriflast <- unique(c(as.Date(ListaPagos$FechaPago)))
write.csv(ListaPagos,path = "D:/!bso/mph/ListaPagosOct22.csv",row.names = F)
write.csv(ListaPagos,"D:/!bso/mph/ListaPagosOct22.csv",row.names = F)
write.csv(fverifprev,"D:/!bso/mph/fverifprev.csv",row.names = F)
write.csv(fveriflast,"D:/!bso/mph/fveriflast.csv",row.names = F)
#_______________________________________________________________________________
####___MONITOREO DE DIAS MORA____####
ListaPagos <- fread("D:/!bso/mph/ListaPagosOct22.csv",encoding = 'Latin-1', fill = T)
fverifprev <- fread("D:/!bso/mph/fverifprev.csv",encoding = 'Latin-1', fill = T)
fverifprev <- as.vector(fread("D:/!bso/mph/fverifprev.csv",encoding = 'Latin-1', fill = T))
fverifprev <- read.csv("D:/!bso/mph/fverifprev.csv")
View(fverifprev)
fverifprev <- as.vector(read.csv("D:/!bso/mph/fverifprev.csv"))
fverifprev <- as.character(read.csv("D:/!bso/mph/fverifprev.csv"))
fverifprev
fverifprev <- as.Date(read.csv("D:/!bso/mph/fverifprev.csv"))
fverifprev <- as.Date(read.csv("D:/!bso/mph/fverifprev.csv")$x)
fveriflast <- as.Date(read.csv("D:/!bso/mph/fveriflast.csv")$x)
View(ListaPagos)
glimpse(ListaPagos)
#_______________________________________________________________________________
####___MONITOREO DE DIAS MORA____####
ListaPagos <- fread("D:/!bso/mph/ListaPagosOct22.csv",encoding = 'Latin-1', fill = T)
fverifprev <- unique(c(as.Date(ListaPagos$FechaPago)-1))
fveriflast <- unique(c(as.Date(ListaPagos$FechaPago)))
ListaPagos <- ListaPagos %>%
mutate(FechaPago = as.Date(ListaPagos$FechaPago))
ejemplos <- data.frame(Operacion=as.numeric(),
Fecha=as.Date(character()),
DIASMORA=as.numeric(),
FechaPago=as.Date(as.numeric()),
HoraPago=character(),
FechaPrevistaPago=as.Date(as.numeric()))
