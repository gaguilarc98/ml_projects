library(Hmisc)
library(data.table)
library(tidyverse)
library(readxl)
library(writexl)
library(xts)
library(forecast)
library(quantmod)
library(astsa)
library(tidyquant)  # Loads tidyverse, tidyquant, financial pkgs, xts/zoo
library(timetk)     # For consistent time series coercion functions
library(stringr)    # Working with strings
library(forcats)    # Working with factors/categorical data
library(timeSeries)
library(tseries)
library(xtable)
library(openxlsx)
library(hrbrthemes)
library(viridis)
library(scales)
library(janitor)
library(RColorBrewer)
library(paletteer)
library(plotly)
library(kableExtra)
library(glmnet)
remove(list = ls())
options("encoding" = "UTF-8")
#Sys.setlocale("LC_MESSAGES", 'es_MX.UTF-8')
options(scipen = 999)
cbp1 <- c("#4198B5", "#246D94", "#083554", "#D43B1B",
"#E96732", "#FB9263")
paleta <- colorRampPalette(c("slateblue4","purple4","slateblue3","darkorchid3","red3","tan2","yellow2","white"),bias=1.5)
bdcBSO_full <- readRDS('//VFSNALSRV/RiesgoCrediticioOFN/Bases_Riesgos/MIS_SGNRFAR/analitica/califClientes/bdcBSO_full.rds')
bdcBSO_prev <- bdcBSO_full %>%
select(CI, saldous, previus, Fecha) %>%
group_by(CI, Fecha) %>%
summarise_all(sum)
names(bdcBSO_full)
remove(list = ls())
gc()
options("encoding" = "UTF-8")
library(dplyr)
library(lubridate)
library(data.table)
library(tidyverse)
library(readxl)
library(writexl)
library(xts)
library(quantmod)
library(stringr)    # Working with strings
library(forcats)    # Working with factors/categorical data
library(scales)
library(ggplot2)
library(gt)
library(knitr)
library(kableExtra)
paleta <- colorRampPalette(c("navyblue","steelblue4","dodgerblue4","darkorchid4","purple3","slateblue3","red2","orange","yellowgreen","yellow2","pink3","snow3"),bias=1.25)
remove(list = ls())
gc()
options("encoding" = "UTF-8")
library(dplyr)
library(lubridate)
library(data.table)
library(tidyverse)
library(readxl)
library(writexl)
library(xts)
library(quantmod)
library(stringr)    # Working with strings
library(forcats)    # Working with factors/categorical data
library(scales)
library(ggplot2)
library(gt)
library(knitr)
library(kableExtra)
paleta <- colorRampPalette(c("navyblue","steelblue4","dodgerblue4","darkorchid4","purple3","slateblue3","red2","orange","yellowgreen","yellow2","pink3","snow3"),bias=1.25)
remove(list = ls())
gc()
options("encoding" = "UTF-8")
library(dplyr)
library(lubridate)
library(data.table)
library(tidyverse)
library(readxl)
library(writexl)
library(xts)
library(quantmod)
library(stringr)    # Working with strings
library(forcats)    # Working with factors/categorical data
library(scales)
library(ggplot2)
library(gt)
library(knitr)
library(kableExtra)
paleta <- colorRampPalette(c("navyblue","steelblue4","dodgerblue4","darkorchid4","purple3","slateblue3","red2","orange","yellowgreen","yellow2","pink3","snow3"),bias=1.25)
tm_all <- read.csv("D:/!bso/transMat/Oreports/tmAll_Dic22.csv") %>%
mutate(monDate=as.yearmon(monDate))
tm2022_prob <- tm_all %>%
dplyr::filter(monDate > 'dic. 2021') %>%
select(probN, cm1, cmt, monDate) %>%
pivot_wider(names_from = cmt, values_from = probN, values_fill = 0) %>%
arrange(monDate, cm1) %>%
dplyr::filter(!is.na(cm1)) %>%
relocate(monDate,cm1,A,B,C,D,E,`F`,S,Z)
tm_cumprob <- tm2022_prob %>%
group_by(monDate) %>%
mutate(Permanencia = case_when(cm1=="A"~A,cm1=="B"~B,cm1=="C"~C,cm1=="D"~D,
cm1=="E"~E,cm1=="F"~`F`,cm1=="S"~S,)) %>%
mutate(Deterioro = case_when(cm1=="A"~B+C+D+E+`F`+S,
cm1=="B"~C+D+E+`F`+S,
cm1=="C"~D+E+`F`+S,
cm1=="D"~E+`F`+S,
cm1=="E"~`F`+S,
cm1=="F"~S,
cm1=="S"~0,)) %>%
mutate(`Recuperación` = case_when(cm1=="A"~Z,
cm1=="B"~A+Z,
cm1=="C"~A+B+Z,
cm1=="D"~A+B+C+Z,
cm1=="E"~A+B+C+D+Z,
cm1=="F"~A+B+C+D+E+Z,
cm1=="S"~Z,)) %>%
select(`Recuperación`,Deterioro,Permanencia) %>%
ungroup()
tm2022_ops <- tm_all %>%
dplyr::filter(as.yearmon(monDate) > 'dic. 2021') %>%
mutate(one=as.double(one)) %>%
arrange(monDate) %>%
select(one, cm1, cmt, monDate) %>%
pivot_wider(names_from = cmt, values_from = one, values_fill = 0) %>%
arrange(monDate, cm1) %>%
dplyr::filter(!is.na(cm1)) %>%
relocate(monDate,cm1,A,B,C,D,E,`F`,S,Z)
tm_cumops <- tm2022_ops %>%
group_by(monDate) %>%
mutate(Permanencia = case_when(cm1=="A"~A,cm1=="B"~B,cm1=="C"~C,cm1=="D"~D,
cm1=="E"~E,cm1=="F"~`F`,cm1=="S"~S,)) %>%
mutate(Deterioro = case_when(cm1=="A"~B+C+D+E+`F`+S,
cm1=="B"~C+D+E+`F`+S,
cm1=="C"~D+E+`F`+S,
cm1=="D"~E+`F`+S,
cm1=="E"~`F`+S,
cm1=="F"~S,
cm1=="S"~0,)) %>%
mutate(`Recuperación` = case_when(cm1=="A"~Z,
cm1=="B"~A+Z,
cm1=="C"~A+B+Z,
cm1=="D"~A+B+C+Z,
cm1=="E"~A+B+C+D+Z,
cm1=="F"~A+B+C+D+E+Z,
cm1=="S"~Z,)) %>%
select(`Recuperación`,Deterioro,Permanencia) %>%
ungroup()
tm2022_saldo <- tm_all %>%
dplyr::filter(as.yearmon(monDate) > 'dic. 2021') %>%
mutate(monDate=as.yearmon(monDate)) %>%
arrange(monDate) %>%
select(saldous, cm1, cmt, monDate) %>%
pivot_wider(names_from = cmt, values_from = saldous, values_fill = 0) %>%
arrange(monDate, cm1) %>%
dplyr::filter(!is.na(cm1)) %>%
relocate(monDate,cm1,A,B,C,D,E,`F`,S,Z) %>%
select(-Z)
tm_cumsaldo <- tm2022_saldo %>%
group_by(monDate) %>%
mutate(Permanencia = case_when(cm1=="A"~A,cm1=="B"~B,cm1=="C"~C,cm1=="D"~D,
cm1=="E"~E,cm1=="F"~`F`,cm1=="S"~S,)) %>%
mutate(Deterioro = case_when(cm1=="A"~B+C+D+E+`F`+S,
cm1=="B"~C+D+E+`F`+S,
cm1=="C"~D+E+`F`+S,
cm1=="D"~E+`F`+S,
cm1=="E"~`F`+S,
cm1=="F"~S,
cm1=="S"~0,)) %>%
mutate(Recuperación = case_when(cm1=="A"~0,
cm1=="B"~A,
cm1=="C"~A+B,
cm1=="D"~A+B+C,
cm1=="E"~A+B+C+D,
cm1=="F"~A+B+C+D+E,
cm1=="S"~0,)) %>%
select(`Recuperación`,Deterioro,Permanencia) %>%
ungroup()
library(quarto)
install.packages("quarto")
library(quarto)
library(quarto)
quarto_render(input = 'D:/Code/Reportes/Reporte_TransMat.qmd',
output_format = "pdf",
output_file = 'D:/Code/202212_Reporte_TransMat.pdf')
quarto_render(input = 'D:/Code/Reportes/Reporte_TransMat.qmd',
output_format = "pdf",
output_file = '202212_Reporte_TransMat.pdf')
remove(list = ls())
gc()
options("encoding" = "UTF-8")
library(dplyr)
library(lubridate)
library(data.table)
library(tidyverse)
library(readxl)
library(writexl)
library(xts)
library(quantmod)
library(scales)
library(stringr)
library(forcats)
library(tseries)
library(openxlsx)
library(scales)
library(janitor)
library(ggplot2)
remove(list = ls())
gc()
options("encoding" = "UTF-8")
Sys.setlocale("LC_MESSAGES", 'es_MX.UTF-8')
options(scipen = 999)
cases <- function(quant,levs,values,default=NA){
if(length(levs)!=length(values)){
print("ERROR: NUMERO DE NIVELES Y VALORES NO COINCIDE")
return()
}
n <- length(values)
new <- rep(default,length(quant))
for (i in 1:n) {
new[which(quant==levs[i])] <- values[i]
}
return(new)
}
dfCancel <- readRDS("D:/!bso/Consultas/dfCancelEne17Dic22.csv")
print(dfCancel %>%
group_by(mCancel) %>%
summarise(saldo=sum(saldous),nOps=n())) #Resumen informativo de cancelados por mes
glimpse(dfCancel)
print(dfCancel %>%
dplyr::filter(monDate > 'dic. 2021') %>%
group_by(mCancel) %>%
summarise(saldo=sum(saldous),nOps=n())) #Resumen informativo de cancelados por mes
View(dfCancel)
print(dfCancel %>%
dplyr::filter(mCancel > 'dic. 2021') %>%
group_by(mCancel) %>%
summarise(saldo=sum(saldous),nOps=n())) #Resumen informativo de cancelados por mes
dfCancel %>%
dplyr::filter(mCancel > 'dic. 2021') %>%
group_by(mCancel) %>%
summarise(saldo=sum(saldous),nOps=n()) %>%
mutate(across(saldo:nOps,~format(round(.x,0),big.mark=",",scientific=F))) %>%
rename(Mes=mCancel, `Saldo (USD)`=saldo, Operaciones= nOps) %>%
kable(format="latex",booktabs=TRUE, caption="Saldo y operaciones canceladas",linesep="") %>%
column_spec(1,bold=T) %>%
row_spec(0,bold=T) %>%
add_header_above(c(" "=1,"Destino"=7," "=1)) %>%
kable_styling(font_size = 8,latex_options="HOLD_position")
bdcCancel <- readRDS('D:/!bso/transMat/matCancel.rds')
print(dfCancelSum)
print(bdcCancel)
bdcFull <- readRDS('D:/!bso/transMat/bdcFull.rds')
print(xx <- bdcFull %>%
dplyr::filter(monDate> 'dic. 2021') %>%
group_by(monDate) %>%
summarise(saldo=sum(saldous,na.rm=T),nOps=n())) #Resumen informativo de transiciones por mes
bdcTrans <- readRDS("D:/!bso/transMat/bdcTrans.rds")
print(bdcTrans %>%
group_by(cm1,cmt,monDate) %>%
summarise(nOps=n())) # Resumen informativo de transiciones
dfCancel %>%
dplyr::filter(mCancel > 'dic. 2021') %>%
group_by(mCancel) %>%
summarise(saldo=sum(saldous),nOps=n()) %>%
mutate(across(saldo:nOps,~format(round(.x,0),big.mark=",",scientific=F))) %>%
rename(Mes=mCancel, `Saldo (USD)`=saldo, Operaciones= nOps) %>%
kable(format="latex",booktabs=TRUE, caption="Saldo y operaciones canceladas",linesep="") %>%
column_spec(1,bold=T) %>%
row_spec(0,bold=T) %>%
add_header_above(c(" "=1,"Destino"=7," "=1)) %>%
kable_styling(font_size = 8,latex_options="HOLD_position")
bdcFull %>%
dplyr::filter(monDate> 'dic. 2021') %>%
group_by(monDate) %>%
summarise(saldo=sum(saldous,na.rm=T),nOps=n()) %>%
mutate(across(saldo:nOps,~format(round(.x,0),big.mark=",",scientific=F))) %>%
rename(Mes=monDate, `Saldo (USD)`=saldo, Operaciones= nOps) %>%
kable(format="latex",booktabs=TRUE, caption="Saldo y operaciones sin cancelar",linesep="") %>%
column_spec(1,bold=T) %>%
row_spec(0,bold=T) %>%
add_header_above(c(" "=1,"Destino"=7," "=1)) %>%
kable_styling(font_size = 8,latex_options="HOLD_position")
remove(list = ls())
gc()
options("encoding" = "UTF-8")
library(dplyr)
library(lubridate)
library(data.table)
library(tidyverse)
library(readxl)
library(writexl)
library(xts)
library(quantmod)
library(stringr)    # Working with strings
library(forcats)    # Working with factors/categorical data
library(scales)
library(ggplot2)
library(gt)
library(knitr)
library(kableExtra)
paleta <- colorRampPalette(c("navyblue","steelblue4","dodgerblue4","darkorchid4","purple3","slateblue3","red2","orange","yellowgreen","yellow2","pink3","snow3"),bias=1.25)
dfCancel <- readRDS("D:/!bso/Consultas/dfCancelEne17Dic22.csv")
bdcFull <- readRDS('D:/!bso/transMat/bdcFull.rds')
tm_all <- read.csv("D:/!bso/transMat/Oreports/tmAll_Dic22.csv") %>%
mutate(monDate=as.yearmon(monDate))
dfCancel %>%
dplyr::filter(mCancel > 'dic. 2021') %>%
group_by(mCancel) %>%
summarise(saldo=sum(saldous),nOps=n()) %>%
mutate(across(saldo:nOps,~format(round(.x,0),big.mark=",",scientific=F)))
P2full <- fread("D:/!bso/mph/P2FullLast.csv",
encoding = "Latin-1",fill = T,sep=',')
####____EXTRAYENDO PAGOS TARDÍOS____####
P2uh <- P2full %>%
mutate(hour = as.numeric(str_sub(HoraPago, 1, 2))) %>%
mutate(hourUltDia = as.numeric(str_sub(Hora_UltDia, 1, 2))) %>%
group_by(mesPago) %>%
mutate(maxDia = max(dayPago)) %>%
mutate(maxDia = ifelse(mesPago==2,25,maxDia)) %>% #Para febrero se toma el 25 como último día
mutate(maxDia = ifelse(mesPago==12,30,maxDia)) %>% #Para diciembre se considera el 30 y 31
ungroup() %>%
mutate(FechaPago = as.Date(paste(yearPago, mesPago, dayPago), format = '%Y%m%d')) %>%
mutate(appsH = ifelse(dayPago >= maxDia-2 & FechaPago > FechaPrevistaPago, 1, 0)) %>%
mutate(appsU = case_when(mesPago==12 & dayPago>=maxDia & FechaPago > FechaPrevistaPago &
hourUltDia >=12~1,
mesPago!=12 & dayPago==maxDia & FechaPago > FechaPrevistaPago &
hourUltDia>=12~1,TRUE~0)) %>%
group_by(Operacion) %>%
mutate(appsH = sum(appsH))%>%
mutate(appsU = sum(appsU))%>%
ungroup() %>%
dplyr::filter(appsH >= 1 & appsU >= 1) %>%
group_by(Operacion) %>%
arrange(Operacion, mesPago, dayPago) %>%
mutate(pos = row_number()) %>%
dplyr::filter(pos == 1) %>%
ungroup()
glimpse(P2uh)
####____EXTRAYENDO PAGOS TARDÍOS____####
P2uh <- P2full %>%
mutate(hour = as.numeric(str_sub(HoraPago, 1, 2))) %>%
mutate(hourUltDia = as.numeric(str_sub(Hora_UltDia, 1, 2))) %>%
group_by(mesPago) %>%
mutate(maxDia = max(dayPago)) %>%
mutate(maxDia = ifelse(mesPago==2,25,maxDia)) %>% #Para febrero se toma el 25 como último día
mutate(maxDia = ifelse(mesPago==12,30,maxDia)) %>% #Para diciembre se considera el 30 y 31
ungroup() %>%
mutate(FechaPago = as.Date(paste(yearPago, mesPago, dayPago), format = '%Y%m%d')) %>%
mutate(Fecha = as.yearmon(FechaPago)) %>%
mutate(appsH = ifelse(dayPago >= maxDia-2 & FechaPago > FechaPrevistaPago, 1, 0)) %>%
mutate(appsU = case_when(mesPago==12 & dayPago>=maxDia & FechaPago > FechaPrevistaPago &
hourUltDia >=12~1,
mesPago!=12 & dayPago==maxDia & FechaPago > FechaPrevistaPago &
hourUltDia>=12~1,TRUE~0))
####____COUNTING PAGOS TARDÍOS POR OPERACION____####
P2uh_group <- P2uh
####____COUNTING PAGOS TARDÍOS POR OPERACION____####
P2uh_group <- P2uh %>%
group_by(Operacion) %>%
mutate(appsH = sum(appsH))%>%
mutate(appsU = sum(appsU))%>%
ungroup() %>%
dplyr::filter(appsH >= 1 & appsU >= 1) %>%
group_by(Operacion) %>%
arrange(Operacion, mesPago, dayPago) %>%
mutate(pos = row_number()) %>%
dplyr::filter(pos == 1) %>%
ungroup()
####____####
P2uh <- P2uh %>%
dplyr::filter(appsU==1)
bdcFinal <- read.csv("D:/!bso/mph/Oreports/bdcEvolEne22Dic22.csv") %>%
mutate(Fecha=as.yearmon(Fecha))
bdcProc <- bdcFinal %>%
select(Fecha,saldous,opTot) %>%
group_by(Fecha) %>%
summarise_all(sum) %>%
ungroup()
scale_fac <- max(bdcProc$saldous)/max(bdcProc$opTot)
ggplot(bdcProc,aes(x=Fecha,y=saldous))+
geom_line(color=paleta(12)[2],size=1.5,group=1)+
geom_line(aes(y=opTot*scale_fac),color=paleta(12)[8],size=1.5)+
labs(x="Mes",y="Saldo tardío en USD")+
scale_y_continuous(breaks=seq(0,30e7,5e6),labels = scales::comma,
sec.axis = sec_axis(~./scale_fac,name="Nro Operaciones",
breaks = seq(0,7000,950)))+
theme_minimal()+
theme(axis.text.x = element_text(angle = 90, vjust =0.5, hjust = 0.5),
axis.text.y.left = element_text(color=paleta(8)[2]),
axis.text.y.right = element_text(color=paleta(8)[6]))
####____DELETING PAGOS NO TARDÍOS____####
P2uh <- P2uh %>%
dplyr::filter(appsU==1)
write.csv(P2uh, "D:/!bso/mph/P2uh.csv",row.names = F)
P2uh <- fread("D:/!bso/mph/P2uh.csv",
encoding = "Latin-1",fill = T,sep=',')
####____CRUZANDO CONTEO DE PAGOS TARDÍOS CON ÚLTIMO CIERRE####
lastCierre2 <- readRDS('D:/!bso/girCartera/rdsGAR/ec_Dic2022.rds') %>%
mutate(NOMBRE_CLIENTE=paste(NOMBRE_TIT,PATERNO_TIT,MATERNO_TIT,sep = " ")) %>%
left_join(agen,by="AGENCIA") %>% #Se añade el nombre de la agencia
dplyr::filter(MODULO != 131) %>%
dplyr::filter(ESTADO != 'CASTIGADA') %>% #Eliminamos las operaciones castigadas
mutate(fdes = dmy(FDESEMBOLSO)) %>%
rename(Operacion=OPERACION) %>%
mutate(Reprogramado=ifelse(saldoReprog>0,1,0)) %>%
mutate(Refinanciado=ifelse(saldoRef>0,1,0)) %>%
mutate(Diferido=ifelse(saldoDif>0,1,0)) %>%
mutate(Periodo_Gracia=ifelse(GRACIA_MESES>0,1,0)) %>%
mutate(Rango_Desembolso = ifelse(montous > 20000, '20K+', 'under20K')) %>%
select(Operacion,sucursal,NOMBRE_CLIENTE,NOMBRE_AGENCIA,NOMBRE_ASESOR,tipoCred,labGrupoC,
labGrupoD,ESTADO,ctaCont,DIASMORA, Rango_Desembolso,rangom,previus,opTot,
saldous,saldoMora,saldoDifFranz,saldoDif,saldoRef,saldoReprog,par0,par30,
par0Reprog,par30Reprog,par0Ref,par30Ref,par0Dif,par30Dif,
par0DifFranz,par30DifFranz,Reprogramado, Refinanciado, Diferido, Periodo_Gracia)
####____SALDO TARDIO EVOLUTIVO____####
agen <- read.csv("D:/!bso/bases/csv/codigos_agencia.csv")
####____CRUZANDO CONTEO DE PAGOS TARDÍOS CON ÚLTIMO CIERRE####
lastCierre2 <- readRDS('D:/!bso/girCartera/rdsGAR/ec_Dic2022.rds') %>%
mutate(NOMBRE_CLIENTE=paste(NOMBRE_TIT,PATERNO_TIT,MATERNO_TIT,sep = " ")) %>%
left_join(agen,by="AGENCIA") %>% #Se añade el nombre de la agencia
dplyr::filter(MODULO != 131) %>%
dplyr::filter(ESTADO != 'CASTIGADA') %>% #Eliminamos las operaciones castigadas
mutate(fdes = dmy(FDESEMBOLSO)) %>%
rename(Operacion=OPERACION) %>%
mutate(Reprogramado=ifelse(saldoReprog>0,1,0)) %>%
mutate(Refinanciado=ifelse(saldoRef>0,1,0)) %>%
mutate(Diferido=ifelse(saldoDif>0,1,0)) %>%
mutate(Periodo_Gracia=ifelse(GRACIA_MESES>0,1,0)) %>%
mutate(Rango_Desembolso = ifelse(montous > 20000, '20K+', 'under20K')) %>%
select(Operacion,sucursal,NOMBRE_CLIENTE,NOMBRE_AGENCIA,NOMBRE_ASESOR,tipoCred,labGrupoC,
labGrupoD,ESTADO,ctaCont,DIASMORA, Rango_Desembolso,rangom,previus,opTot,
saldous,saldoMora,saldoDifFranz,saldoDif,saldoRef,saldoReprog,par0,par30,
par0Reprog,par30Reprog,par0Ref,par30Ref,par0Dif,par30Dif,
par0DifFranz,par30DifFranz,Reprogramado, Refinanciado, Diferido, Periodo_Gracia)
idHR <- P2uh_group %>%
dplyr::filter(apssU>1) %>%
select(Operacion, appsH, appsU,mesPago,
dayPago,hourUltDia) %>%
left_join(lastCierre2, by = 'Operacion') %>%
mutate(HR = 1) %>%
mutate(bin2 = case_when(dayPago==29~'1. Pagó antepenúltimo día',
dayPago==30~'2. Pagó penúltimo día',
dayPago==31 & hourUltDia<=12~'3. Pagó último día antes de 12',
dayPago==31 & hourUltDia>12 & hourUltDia<=14~'4. Pagó último día de 12 a 14',
dayPago==31 & hourUltDia>14~'5. Pagó último día de 14 en adelante',
TRUE~'0. Pagó antes del antepenúltimo día'
)) %>%
select(Operacion,appsH,appsU,HR,bin2)
View(P2uh_group)
idHR <- P2uh_group %>%
dplyr::filter(appsU>1) %>%
select(Operacion, appsH, appsU,mesPago,
dayPago,hourUltDia) %>%
left_join(lastCierre2, by = 'Operacion') %>%
mutate(HR = 1) %>%
mutate(bin2 = case_when(dayPago==29~'1. Pagó antepenúltimo día',
dayPago==30~'2. Pagó penúltimo día',
dayPago==31 & hourUltDia<=12~'3. Pagó último día antes de 12',
dayPago==31 & hourUltDia>12 & hourUltDia<=14~'4. Pagó último día de 12 a 14',
dayPago==31 & hourUltDia>14~'5. Pagó último día de 14 en adelante',
TRUE~'0. Pagó antes del antepenúltimo día'
)) %>%
select(Operacion,appsH,appsU,HR,bin2)
lastCierre <- lastCierre2 %>%
left_join(idHR,by='Operacion') %>%
mutate(HR = ifelse(is.na(HR),0,HR)) %>%
mutate(Saldo_UR=ifelse(HR==1,saldous,0)) %>%
mutate(saldoDif=ifelse(saldoDif==0,NA,saldoDif)) %>%
mutate(saldoRef=ifelse(saldoRef==0,NA,saldoRef)) %>%
mutate(saldoDifFranz=ifelse(saldoDifFranz==0,NA,saldoDifFranz)) %>%
mutate(saldoReprog=ifelse(saldoReprog==0,NA,saldoReprog)) %>%
mutate(saldoMora=ifelse(saldoMora==0,NA,saldoMora)) %>%
mutate(saldoDif=ifelse(saldoDif==0,NA,saldoDif)) %>%
dplyr::rename(Sucursal = sucursal,
Agencia = NOMBRE_AGENCIA,
Asesor = NOMBRE_ASESOR,
Tipo_Credito = tipoCred,
Actividad_Cliente = labGrupoC,
Destino_Credito = labGrupoD,
Estado = ESTADO,
Prevision_USD = previus,
Saldo_USD = saldous,
Instancias_AR = appsH,
Instancias_UR = appsU,
Operacion_Riesgosa = HR,
Pago_Ultimos_Dias = bin2,
Rango_Monto = rangom,
Operaciones = opTot,
Cartera_Reprogramada = saldoReprog,
Saldo_Mora = saldoMora,
PaR_30_Reprogramada = par0Reprog,
PaR_0 = par0,
PaR_30 = par30,
PaR_0_Reprogramada = par30Reprog,
Cartera_Diferida_ASFI = saldoDif,
Cartera_Diferida_RC = saldoDifFranz,
PaR_0_Refinanciada = par0Ref,
PaR_30_Refinanciada = par30Ref,
Cartera_Refinanciada = saldoRef,
PaR_0_Diferida_ASFI = par0Dif,
PaR_30_Diferida_ASFI = par30Dif ,
PaR_0_Diferida_RC = par0DifFranz,
PaR_30_Diferida_RC = par30DifFranz,
Dias_Mora=DIASMORA)
View(lastCierre)
